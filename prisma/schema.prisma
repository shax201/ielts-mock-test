// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_s0i7MxjcIhCd@ep-late-dust-a17jlpvf-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum ModuleType {
  LISTENING
  READING
  WRITING
  SPEAKING
}

enum QuestionType {
  MCQ
  FIB
  MATCHING
  TRUE_FALSE
  NOT_GIVEN
  TRUE_FALSE_NOT_GIVEN
  NOTES_COMPLETION
  SUMMARY_COMPLETION
  MULTIPLE_CHOICE
}

enum AssignmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  EXPIRED
}

model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole
  phone        String?
  dateOfBirth  DateTime? @map("date_of_birth")
  address      String?
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  createdMocks     Mock[]           @relation("MockCreator")
  assignments      Assignment[]
  instructorMarks  InstructorMark[]
  writingFeedback  WritingFeedback[]

  @@map("users")
}

model Mock {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  creator     User         @relation("MockCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  modules     MockModule[]
  assignments Assignment[]

  @@map("mocks")
}

model MockModule {
  id            String     @id @default(cuid())
  mockId        String     @map("mock_id")
  type          ModuleType
  durationMinutes Int     @map("duration_minutes")
  audioUrl      String?    @map("audio_url")
  instructions  String?
  order         Int
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  // Relations
  mock       Mock          @relation(fields: [mockId], references: [id], onDelete: Cascade)
  questions  MockQuestion[]
  submissions Submission[]

  @@map("mock_modules")
}

model QuestionBank {
  id        String       @id @default(cuid())
  type      QuestionType
  contentJson Json       @map("content_json")
  reusable  Boolean      @default(false)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  // Relations
  mockQuestions MockQuestion[]

  @@map("question_bank")
}

model MockQuestion {
  id              String       @id @default(cuid())
  moduleId        String       @map("module_id")
  questionBankId  String       @map("question_bank_id")
  order           Int
  points          Int          @default(1)
  correctAnswerJson Json       @map("correct_answer_json")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  // Relations
  module      MockModule    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  questionBank QuestionBank @relation(fields: [questionBankId], references: [id], onDelete: Cascade)

  @@map("mock_questions")
}

model Assignment {
  id             String           @id @default(cuid())
  mockId         String           @map("mock_id")
  studentId      String           @map("student_id")
  candidateNumber String          @map("candidate_number")
  tokenHash      String           @unique @map("token_hash")
  validFrom      DateTime         @map("valid_from")
  validUntil     DateTime         @map("valid_until")
  status         AssignmentStatus @default(PENDING)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  // Relations
  mock       Mock        @relation(fields: [mockId], references: [id], onDelete: Cascade)
  student    User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  submissions Submission[]
  result     Result?

  @@index([tokenHash])
  @@index([candidateNumber])
  @@map("assignments")
}

model Submission {
  id          String    @id @default(cuid())
  assignmentId String   @map("assignment_id")
  moduleId    String   @map("module_id")
  startedAt   DateTime @map("started_at")
  submittedAt DateTime? @map("submitted_at")
  answersJson Json      @map("answers_json")
  autoScore   Float?    @map("auto_score")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  assignment       Assignment      @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  module           MockModule     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  instructorMarks  InstructorMark[]
  writingFeedback  WritingFeedback[]

  @@index([assignmentId, moduleId])
  @@map("submissions")
}

model InstructorMark {
  id                  String   @id @default(cuid())
  submissionId        String   @map("submission_id")
  instructorId        String   @map("instructor_id")
  taskAchievement     Float?   @map("task_achievement")
  coherenceCohesion   Float?   @map("coherence_cohesion")
  lexicalResource     Float?   @map("lexical_resource")
  grammarAccuracy     Float?   @map("grammar_accuracy")
  overallBand         Float?   @map("overall_band")
  markedAt            DateTime @default(now()) @map("marked_at")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  instructor User       @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@map("instructor_marks")
}

model WritingFeedback {
  id              String   @id @default(cuid())
  submissionId    String   @map("submission_id")
  instructorId    String   @map("instructor_id")
  textRangeStart  Int      @map("text_range_start")
  textRangeEnd    Int      @map("text_range_end")
  comment         String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  instructor User       @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@map("writing_feedback")
}

model Result {
  id            String   @id @default(cuid())
  assignmentId  String   @unique @map("assignment_id")
  listeningBand Float?   @map("listening_band")
  readingBand   Float?   @map("reading_band")
  writingBand   Float?   @map("writing_band")
  speakingBand  Float?   @map("speaking_band")
  overallBand   Float?   @map("overall_band")
  generatedAt   DateTime @default(now()) @map("generated_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  pdfReport PDFReport?

  @@map("results")
}

model PDFReport {
  id          String   @id @default(cuid())
  resultId    String   @unique @map("result_id")
  fileUrl     String   @map("file_url")
  generatedAt DateTime @default(now()) @map("generated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  result Result @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@map("pdf_reports")
}
