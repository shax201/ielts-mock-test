version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ielts-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ielts_mock_test}
      POSTGRES_USER: ${POSTGRES_USER:-ielts_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only for security
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - ielts-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ielts_user} -d ${POSTGRES_DB:-ielts_mock_test}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: ielts-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-default_redis_password}
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only for security
    volumes:
      - redis_data:/data
    networks:
      - ielts-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-default_redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: ielts-app-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"  # Bind to localhost only, nginx will proxy
    env_file:
      - docker.env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_redis_password}@redis:6379
      - NEXTAUTH_URL=${NEXTAUTH_URL:-https://yourdomain.com}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./public/uploads:/app/public/uploads:rw
      - app_logs:/app/logs
    networks:
      - ielts-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run

  # Database Migration Service
  db-migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ielts-db-migrate-prod
    command: sh -c "npx prisma migrate deploy && npx prisma db seed"
    env_file:
      - docker.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ielts-network
    restart: "no"  # Run once and exit
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: ielts-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - ./public/uploads:/var/www/uploads:ro
    depends_on:
      app:
        condition: service_healthy
    networks:
      - ielts-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: ielts-db-backup-prod
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-ielts_mock_test}
      POSTGRES_USER: ${POSTGRES_USER:-ielts_user}
    volumes:
      - ./backups:/backups
      - ./scripts/backup-db.sh:/backup-db.sh:ro
    networks:
      - ielts-network
    depends_on:
      postgres:
        condition: service_healthy
    command: /backup-db.sh
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Monitoring Service
  monitor:
    image: alpine:latest
    container_name: ielts-monitor-prod
    restart: unless-stopped
    volumes:
      - ./scripts/monitor-prod.sh:/monitor.sh:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ielts-network
    command: sh -c "apk add --no-cache docker-cli curl && chmod +x /monitor.sh && /monitor.sh"
    depends_on:
      - app
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Log Aggregation (Optional - for centralized logging)
  loki:
    image: grafana/loki:2.9.0
    container_name: ielts-loki-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - loki_data:/loki
    networks:
      - ielts-network
    command: -config.file=/etc/loki/local-config.yaml
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  loki_data:
    driver: local

networks:
  ielts-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
